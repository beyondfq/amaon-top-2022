#############################################################
Given the stock prices of n months, the net price change for the i-th month is defined as 
the absolute difference between the average of stock prices for the first i months and for 
the remaining (n-i) months where 1 <= i < n. These averages are rounded down to an integer.
Given an array of stock prices, find the month at which the net price change is minimum. 
If there are s‍everal such months, return the earliest month.
Note: The average of a set of integers here is defined as the sum of integers divided by the number of integers, 
rounded down to the nearest integer.
For example, the average of [1,2,3,4] is the floor of (1 + 2 + 3 + 4) / 4 = 2.5 and the floor of 2.5 is 2.

Example:
stockPrice = [1,3,2,3]
The minimum net price change is 0, and it occurs in the 2nd month. Return 2.
#############################################################
import math
def findMinNetPriceMonth(stockPrices):
    minNet = float('inf')
    n = len(stockPrices)
    for i in range(len(stockPrices)-1):
        part1 = math.floor(sum(stockPrices[:i+1])/(i+1))
        part2 = math.floor(sum(stockPrices[i+1:n])/(n-i-1))
        diff = abs(part2-part1)
        if diff < minNet:
            minNet = diff
            month = i+1
    return month
    
res = findMinNetPriceMonth([1,3,2,4,5])
print(res)
