##################################################
Amazon has installed WiFi routers on the houses along a straight street The city's buildings are arranged linearly, denoted by indices 1 to n. 
There are m Amazon routers and each has a certain range associated with it. Router j installed at a certain building location i can only provide internet to the buildings in the range [(i - routerRange[j]), (i + routerRange[j])] inclusive, where routerRange[j] is the range parameter of router j.

A building is considered to be served if the number of routers providing internet to the building is greater than or equal to the number of people living in it.
Given a list of the number of people living in each building, the locations of the buildings where the routers will be installed and each router's range, find the number of served buildings in the city.

Example

buildingCount = [1,2,1,2,2]
routerLocation = [3,1]
routerRange = [1,2]

There are 5 buildings with tenant counts shown in buildingCount. 
Routers are located in buildings 3 and 1 with ranges 1 and 2 as shown in routerLocation and routerRange.

The first router is in building 3 and provides internet to buildings in the range [2, 4].
The second router is in building 1 and provides internet to buildings in range [1, 3].
Function Description

Complete the function getServedBuildings(buildingCount, routerLocations, routerRange) .

buildingCount = [6,6,6,6,6,6,6]
routerLocation = [6,5,7]
routerRange = [2,1,4]

expected output : 0

##########################################################################################

def getRange(routerRange,routerLocation, buildingCount):
    buildingRange = []
    for i in range(len(routerRange)):
        start = max(routerLocation[i]-routerRange[i]-1, 0)
        end = min(routerLocation[i]+routerRange[i]-1, len(buildingCount))
        buildingRange.append([start, end])
    return buildingRange
    
def getServed(buildingRange, buildingCount):
    served = [0]*len(buildingCount)
    for start, end in buildingRange:
        served[start] += 1
        if end < (len(buildingCount)-1):
            served[end+1] -= 1
    for i in range(1, len(buildingCount)):
        served[i] = served[i] + served[i-1]
    return served

buildingCount = [6,6,6,6,6,6,6]
routerLocation = [6,5,7]
routerRange = [2,1,4]
count = 0
buildingRange = getRange(routerRange,routerLocation,buildingCount)
print(buildingRange)
served = getServed(buildingRange, buildingCount)
print(served)

for i in range(len(buildingCount)):
    if served[i]-buildingCount[i] >= 0:
        count += 1
print(count)
